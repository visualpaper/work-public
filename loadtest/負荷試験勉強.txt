* 負荷試験とは
  可用性 (アベイラビリティ) を担保するための手段の一つ
  * 可用性
    システムがサービスを正常に提供できる状態を指す
    (常にサービスを利用できるシステム = 可用性が高い)

    ※ サービスダウンとは以下のようなものが含まれる
       * 広域ネットワーク障害
       * 広域電源障害
       * ハードウェア障害
         * ネットワーク機器障害
         * サーバの物理障害 (電源、CPU、メモリ、ディスク、etc..)
       * ソフトウェア障害
       * メンテナンス
       * 高負荷によるリクエストのタイムアウト
       * etc...
       (可用性実績 1 年 99.99% = 53 分ほどのサービスダウンがあったことと同義)

       複数サービスを連結させている場合、各々の可用性の掛けた値が全体のサービスの可用性となる。
       (a, b, c, d, e サービスがそれぞれ 99.99% の可用性を担保している場合、連携させると 99.95% ぐらいになる)

  ※ 類似語として、堅牢性という言葉があるが、これはデータの欠損が発生しないことを示す数値である。

  * 可用性を高くするには
    冗長化/スケール可能な設計にする
    * 冗長化
      単一障害点 (そこが壊れると、サービスがダウンする場所) をなくすこと
      ※ つまり、ほかの部分を利用することでサービスを継続できる状態を作ること
      ※ 代替システムを用意する場合は、レイテンシ(ネットワーク遅延)やスループット(データ転送能力) の許す限り、
         できるだけ地理的・物理的に離れた場所に用意する必要がある。 (AWS でいう Multi-AZ)

* 負荷試験の目的とは
  システムの性能を計測することを通じて、可用性を高めること

  一般的な負荷試験の目的は以下の通り
  * ユースケースを想定し、それぞれにおけるシステムの応答性能を推測する
    (担保でなく推測の理由としては、実際のユーザの挙動を完全にシュミレーションしての性能評価は現実的に難しいため)
    ※ 初期稼働時にはユーザ登録ケースが頻発したり、再起動時にはキャッシュが揮発しているため挙動が異なったりと、
       色々なシナリオが考慮した上での実現が必要になる。

  * 高負荷時におけるシステムの性能改善を行う
    ※ 負荷が高くなった際にさまざまな挙動をすることが多々あるため、これらの改善を行う必要がある。
       レイテンシの増加、ロック競合、エラー率増加、データ不整合・欠損等

  * システムがスケール性を持つことを確認する
    ※ ネットワーク・アプリケーション・データベースなど、さまざまな点でスケール性を持つことを確認する必要がある
       性能をより上げるための手段を知っておく必要がある。

  * システムのスケール特性を把握する
    ※ 利用しているサービスのスケールアップ・スケールアウトを行った場合に、どのように性能が上がるのかを把握しておく必要がある
    ※ 具体的には以下を把握しておくと良い
       * いくつかのスループットのレベル (例 100rps / 500rps ....) を処理するために最適なインフラ構成
       * 限界性能の目安
         (必須ではないが、将来さらにスケールを上げる際にそのままスケール可能なのか、アーキテクチャ設計から必要なのか、判断材料になる)
         (真の限界性能を知るのは難しい。とはいえ、要求から算出された性能目標値を超えた検証をすることは有意義)

* 負荷試験におけるシステムの性能評価
  スループット、レイテンシの二つをシステムの性能指標として利用する
  * スループット (単位時間当たりに処理を行う量 ≒ rps)
  * レイテンシ (処理時間)

  性能

* 負荷試験におけるシステム性能改善
  スループット・レイテンシを性能指標としたときに、システム性能改善とは、
  スループットを向上させてレイテンシを低下させることである

* 良い負荷試験の例として
  * 試験対象システムに負荷が集中している状態
    ※ 負荷試験とは文字通り、負荷対象システムに負荷をかけた状態の挙動を調査する試験である。
       試験対象への負荷を集中させるためには、一部 Stub など本番環境と異なる構成を取っても良いと考える必要がある。

  * ボトルネック部分を特定できている状態
    ※ 負荷試験実施中は、常に現在実施中の試験におけるボトルネックはどこになっているのかを意識する必要がある

  ※ ↑の逆 = 悪い負荷試験の例となる。



これらの理解が有った上で、負荷試験ツールの検討を行う。


* 負荷ツール検討

* jmeter
  複雑なシナリオ試験が可能
  XML ベース、GUI で比較的直観的なシナリオの作成が可能
  GUI にて試験結果の表示機能が豊富
  複数サーバを連携させることで高負荷試験が可能

* gatling
  複雑なシナリオ試験が可能
  Scala ベース、スクリプトで記述できるため柔軟なシナリオ作成が可能
  試験結果表示がリッチ (そのままレポートとして使える html ファイルが出力される)
  複数サーバを連携させる手段が少し特殊 (https://gatling.io/docs/current/cookbook/scaling_out/) 独自でやるのが手間かも

* locust
  複雑なシナリオ試験が可能
  Python ベース、スクリプトで記述できるため柔軟なシナリオ作成が可能
  試験結果表示がシンプル
  必要なサーバリソースが少ないため、少ない攻撃サーバで高負荷試験が可能

* tsung
  複雑なシナリオ試験が可能だが GUI によるシナリオの作成・閲覧ができないため複雑なシナリオの管理には不向き
  XML ベース、Jmeter と比較すると書き方が比較的シンプルで使いやすい
  試験結果表示は Json 形式で出力され、閲覧するための Web 画面が準備されている
  少ない攻撃サーバで高負荷をかけるのに適している (速度重視の攻撃ツール)
